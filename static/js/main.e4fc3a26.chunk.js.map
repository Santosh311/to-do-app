{"version":3,"sources":["logo.svg","todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","listofTasks","a","fetch","data","json","response","setState","all_tasks","deleteTask","Task","id","createTask","e","preventDefault","task","document","getElementById","formData","FormData","append","value","console","log","method","body","focus","completeUnCompleteTask","completed","title","state","className","onSubmit","this","type","placeholder","map","list","index","Class","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,uKCqH5BC,E,kDAnHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,YARmB,sBAQN,8BAAAC,EAAA,sEACOC,MAAM,8BADb,cACLC,EADK,gBAEYA,EAAKC,OAFjB,OAELC,EAFK,OAIT,EAAKC,SAAS,CACVC,UAAYF,IALP,2CARM,EAkBnBG,WAlBmB,uCAkBN,WAAOC,GAAP,SAAAR,EAAA,sEACMC,MAAM,qCAAD,OAAsCO,EAAKC,KADtD,cAET,EAAKV,cAFI,2CAlBM,wDAuBnBW,WAvBmB,uCAuBN,WAAOC,GAAP,iBAAAX,EAAA,6DACTW,EAAEC,iBACEC,EAAMC,SAASC,eAAe,SAC9BC,EAAW,IAAIC,UACVC,OAAO,QAASL,EAAKM,OAC9BH,EAASE,OAAO,aAAa,GAC7BF,EAASE,OAAO,KAAM,MACtBE,QAAQC,IAAIL,GAPH,SAQOf,MAAM,qCAAsC,CACxDqB,OAAO,OACPC,KAAKP,IAVA,cAYTH,EAAKM,MAAM,GACXN,EAAKW,QACL,EAAKzB,cAdI,4CAvBM,wDAwClB0B,uBAxCkB,uCAwCO,WAAOZ,GAAP,eAAAb,EAAA,6DACtBa,EAAKa,WAAab,EAAKa,WACnBV,EAAW,IAAIC,UACVC,OAAO,QAASL,EAAKc,OAC9BX,EAASE,OAAO,YAAaL,EAAKa,WAClCV,EAASE,OAAO,KAAML,EAAKJ,IALL,SAMNR,MAAM,qCAAD,OAAsCY,EAAKJ,GAA3C,KAAkD,CACnEa,OAAO,OACPC,KAAKP,IARa,cAUtB,EAAKjB,cAViB,2CAxCP,sDAEf,EAAK6B,MAAM,CACPtB,UAAY,IAEhB,EAAKP,cALU,E,qDAuDT,IAAD,OACL,OACQ,yBAAK8B,UAAU,0CAA0CpB,GAAG,gBAExD,yBAAKoB,UAAU,IACX,yBAAKA,UAAU,qDACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBAEX,gCAAQ,wBAAIA,UAAU,wBAAd,WAKZ,yBAAKA,UAAU,aAEX,0BAAMC,SAAUC,KAAKrB,YACjB,yBAAKmB,UAAU,oBAAmB,2BAAOG,KAAK,WAAWvB,GAAG,OACnBoB,UAAU,+BACVI,YAAY,0BACjD,4BACIJ,UAAU,0DADd,SAKR,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,gCAENE,KAAKH,MAAMtB,UAAU4B,KAAI,SAACC,EAAKC,GAC3B,IAAIC,EAA0B,GAAlBF,EAAKT,UAAkB,YAAY,GAC/C,OACI,wBAAIG,UAAWQ,EAAOC,QAAS,kBAAM,EAAKb,uBAAuBU,KAC7D,yBAAKN,UAAU,cACX,2BAAOA,UAAU,oBACZO,EAAM,EADX,KACgBD,EAAKR,MAAM,uBACfE,UAAU,mBAG1B,uBAAGA,UAAU,sCAAuCS,QAAS,kBAAM,EAAK/B,WAAW4B,sB,GA/FhII,IAAMC,WCYVC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASC,eAAe,SDyHpB,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.e4fc3a26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nclass Todo extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            all_tasks : []\r\n        }\r\n        this.listofTasks()\r\n    }\r\n\r\n    listofTasks =async () => {\r\n        var data =await fetch(\"http://127.0.0.1:8000/api/\")\r\n        var response = await data.json()\r\n\r\n        this.setState({\r\n            all_tasks : response\r\n        });\r\n\r\n    }\r\n\r\n    deleteTask = async (Task) => {\r\n       var data =await fetch(`http://127.0.0.1:8000/delete_task/${Task.id}`)\r\n        this.listofTasks()\r\n    }\r\n\r\n    createTask = async (e) =>{\r\n        e.preventDefault()\r\n        var task =document.getElementById(\"task\")\r\n        var formData = new FormData()\r\n        formData.append('title', task.value)\r\n        formData.append(\"completed\", false)\r\n        formData.append('id', null)\r\n        console.log(formData)\r\n        var data =await fetch(`http://127.0.0.1:8000/create_task/`, {\r\n            method:\"POST\",\r\n            body:formData\r\n        })\r\n        task.value=\"\"\r\n        task.focus()\r\n        this.listofTasks()\r\n    }\r\n\r\n     completeUnCompleteTask = async (task) =>{\r\n        task.completed = !task.completed\r\n        var formData = new FormData()\r\n        formData.append('title', task.title)\r\n        formData.append(\"completed\", task.completed)\r\n        formData.append('id', task.id)\r\n        var data =await fetch(`http://127.0.0.1:8000/update_task/${task.id}/`, {\r\n            method:'POST',\r\n            body:formData\r\n        });\r\n        this.listofTasks()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"col-xs-12 col-sm-9 mx-auto page-content\" id=\"page-content\">\r\n\r\n                    <div className=\"\">\r\n                        <div className=\"row container-fluid d-flex justify-content-center\">\r\n                            <div className=\"col-xs-12 col-sm-9\">\r\n                                <div className=\"card px-3\">\r\n                                    <div className=\"card-title pt-3\">\r\n\r\n                                        <center><h2 className=\"title-color blinking\">Hello</h2>\r\n\r\n                                        </center>\r\n\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n\r\n                                        <form onSubmit={this.createTask}>\r\n                                            <div className=\"add-items d-flex\"><input type=\"textarea\" id=\"task\"\r\n                                                                                     className=\"form-control todo-list-input\"\r\n                                                                                     placeholder=\"Enter your tasks here\"/>\r\n                                                <button\r\n                                                    className=\"add btn btn-primary font-weight-bold todo-list-add-btn\">Add\r\n                                                </button></div>\r\n                                        </form>\r\n\r\n                                        <div className=\"list-wrapper\">\r\n                                            <ul className=\"d-flex flex-column todo-list\">\r\n                                                {\r\n                                                    this.state.all_tasks.map((list,index) => {\r\n                                                        var Class = list.completed == true?\"completed\":\"\"\r\n                                                        return (\r\n                                                            <li className={Class} onClick={() => this.completeUnCompleteTask(list)}>\r\n                                                                <div className=\"form-check\">\r\n                                                                    <label className=\"form-check-label\">\r\n                                                                        {index+1}. {list.title}<i\r\n                                                                                className=\"input-helper\"></i>\r\n                                                                    </label>\r\n                                                                </div>\r\n                                                                <i className=\"remove mdi mdi-close-circle-outline\"  onClick={() => this.deleteTask(list)}></i>\r\n                                                            </li>\r\n\r\n\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Todo","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from \"./todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}